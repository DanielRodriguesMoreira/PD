
import Exceptions.ClientNotLoggedInException;
import Exceptions.CopyFileException;
import Exceptions.CreateAccountException;
import Exceptions.GetFileContentException;
import Exceptions.MakeDirException;
import Exceptions.RemoveFileOrDirException;
import Exceptions.ServerConnectionException;
import Exceptions.UploadException;
import Exceptions.UsernameOrPasswordIncorrectException;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 * @author Daniel Moreira
 * @author Hugo Santos
 * @author Tiago Santos 
 */

public class ClientGUI extends JFrame implements Constants, Observer {
    
    // <editor-fold defaultstate="collapsed" desc=" Variables ">
    Client client;
    static String username;
    static String ipAddress;
    static String portAddress;
    static String password;
    static String passwordConfirmation;
    static String copy;
    static int option;
    static boolean isToCut = false;
    ArrayList<DataAddress> onlineServer = null;
    ArrayList<DataAddress> onlineClient = null;
    private javax.swing.JTree tree;
    DefaultMutableTreeNode root, home;
    public JPopupMenu popup;
    // </editor-fold>
    
    public ClientGUI() {
        initComponents();
        
        // <editor-fold defaultstate="collapsed" desc=" Mostrar InputDialog para escolher o nome/IPServerDirectory/PortServerDirectory ">
        do {
            JTextField inputUsernameTextField = new JTextField();
            JTextField inputIpAddressDirectoryServiceTextField = new JTextField();
            JTextField inputPortDirectoryServiceTextField = new JTextField();
            
            Object[] message = {"Username:", inputUsernameTextField, 
                "SD Address:", inputIpAddressDirectoryServiceTextField, 
                "SD Port:", inputPortDirectoryServiceTextField};
            option = JOptionPane.showConfirmDialog(null, message, "Connect to Directory Service",
                     JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if(option == JOptionPane.OK_OPTION) {
                username = inputUsernameTextField.getText();
                ipAddress = inputIpAddressDirectoryServiceTextField.getText();
                portAddress = inputPortDirectoryServiceTextField.getText();
            } else
                System.exit(0);
            
            // <editor-fold defaultstate="collapsed" desc=" Create Client ">
            try {
                this.client = new Client(username, ipAddress, portAddress);
                this.client.addObserver(this);
            } catch (SocketException ex) {
                String error = "An error occurred with the UDP socket level:\n" + ex;
                JOptionPane.showMessageDialog(null, error, "Socket Exception", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            } catch (UnknownHostException ex) {
                String error = "Can't find directory service";
                JOptionPane.showMessageDialog(null, error, "UnknownHost Exception", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            }
            // </editor-fold>
            
            // </editor-fold>
            
        } while (username.isEmpty() || ipAddress.isEmpty() || portAddress.isEmpty() || option != JOptionPane.OK_OPTION || client.checkClientExists());
        // </editor-fold>
        
        initTree();
        
        // <editor-fold defaultstate="collapsed" desc=" Enviar/Receber mensagem para atualizar as listas ">
        client.getAllLists();
        // </editor-fold>
        
        this.setTitle("Distributed File System - " + username);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelServers = new javax.swing.JLabel();
        jLabelClients = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaMessages = new javax.swing.JTextArea();
        jButtonBroadcast = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListServers = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListClients = new javax.swing.JList();
        jButtonRefreshLists = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListRMIServers = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelServers.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelServers.setText("List of Servers:");

        jLabelClients.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClients.setText("List of Clients:");

        jTextAreaMessages.setEditable(false);
        jTextAreaMessages.setColumns(20);
        jTextAreaMessages.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextAreaMessages.setRows(5);
        jScrollPane4.setViewportView(jTextAreaMessages);

        jButtonBroadcast.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jButtonBroadcast.setText("Broadcast Message");
        jButtonBroadcast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBroadcastMouseClicked(evt);
            }
        });

        jListServers.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jListServers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListServers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListServersMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jListServers);

        jListClients.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jListClients.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListClientsMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jListClients);

        jButtonRefreshLists.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jButtonRefreshLists.setText("Refresh Lists");
        jButtonRefreshLists.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonRefreshListsMouseClicked(evt);
            }
        });

        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 1000));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("List of Messages:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("List of not logged Servers (RMI):");

        jListRMIServers.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jListRMIServers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListRMIServers);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("File System:");

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jMenuItem1.setText("Refresh Lists");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("RMI");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jMenuItem3.setText("Add/Join Observer");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jMenuItem4.setText("Remove Observer");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelServers)
                                .addGap(94, 94, 94)
                                .addComponent(jButtonRefreshLists))
                            .addComponent(jScrollPane5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelClients)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonBroadcast))
                            .addComponent(jScrollPane6)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2))
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelServers)
                    .addComponent(jButtonRefreshLists)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 925, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonBroadcast)
                            .addComponent(jLabelClients))
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initTree(){
        root = new DefaultMutableTreeNode("Root");
        tree = new javax.swing.JTree(root);
        home = new DefaultMutableTreeNode("C:\\");
        root.add(home);
        client.setHomePath(File.listRoots()[0].toString());
        addFiles(new ArrayList<>(Arrays.asList(File.listRoots()[0].listFiles())), home);
        jScrollPane1.setViewportView(tree);
        
        tree.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
              doMouseClicked(me);
            }
        });
        
        tree.setFont(new Font("Tahoma", Font.PLAIN, 24));
    }
    
    // <editor-fold defaultstate="collapsed" desc=" Events ">
    private void jListServersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListServersMouseClicked
        // TODO add your handling code here:
        popup = new JPopupMenu();
        JMenuItem itemLogin, itemLogout, itemRegister;
        
        if(!this.jListServers.isSelectionEmpty()) {
            if (evt.getButton() == 3) {
                // <editor-fold defaultstate="collapsed" desc=" Login Item (PopUpMenu) ">
                itemLogin = new JMenuItem("Login");
                itemLogin.setEnabled(!client.isLoggedIn(onlineServer.get(jListServers.getSelectedIndex()).getName()));
                itemLogin.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        boolean isToRepeat = true;
                        boolean isToLogin = false;
                        // <editor-fold defaultstate="collapsed" desc=" Mostrar InputDialog para escolher o username e password ">
                        do {
                            JTextField inputUsernameTextField = new JTextField();
                            inputUsernameTextField.setText(username);
                            inputUsernameTextField.setEditable(false);
                            JPasswordField inputPasswordTextField = new JPasswordField();

                            Object[] message = {"Username:", inputUsernameTextField, "Password:", inputPasswordTextField};
                            option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                            if(option == JOptionPane.OK_OPTION) {
                                username = inputUsernameTextField.getText();
                                password = String.valueOf(inputPasswordTextField.getPassword());
                                isToLogin = true;
                                
                                if(password.isEmpty())
                                    isToRepeat = true;
                                else
                                    isToRepeat = false;
                            } else if(option == JOptionPane.CANCEL_OPTION) {
                                isToRepeat = false;
                                isToLogin = false;
                            }
                        } while (isToRepeat);
                        // </editor-fold>

                        if (isToLogin) {
                            try {
                                client.Login(password, onlineServer.get(jListServers.getSelectedIndex()));
                                try {
                                    DefaultMutableTreeNode server = new DefaultMutableTreeNode("remote" + onlineServer.get(jListServers.getSelectedIndex()).getName());
                                    root.add(server);
                                    addFiles(client.GetWorkingDirContent(onlineServer.get(jListServers.getSelectedIndex())), server);
                                } catch (ServerConnectionException ex) {
                                    JOptionPane.showMessageDialog(rootPane, ex, "Get Dir Content error", JOptionPane.ERROR_MESSAGE);
                                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                            } catch (ServerConnectionException | UsernameOrPasswordIncorrectException ex) {
                                JOptionPane.showMessageDialog(rootPane, ex, "Login error", JOptionPane.ERROR_MESSAGE);
                            } catch (ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                        }
                    }
                });
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" New Account Item (PopUpMenu) ">
                itemRegister = new JMenuItem("New account");
                itemRegister.setEnabled(!client.isLoggedIn(onlineServer.get(jListServers.getSelectedIndex()).getName()));
                itemRegister.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        // <editor-fold defaultstate="collapsed" desc=" Mostrar InputDialog para escolher o username e password ">
                        boolean isToRepeat = true;
                        boolean isToCreateAccount = false;
                        do {
                            JTextField inputUsernameTextField = new JTextField();
                            inputUsernameTextField.setText(username);
                            inputUsernameTextField.setEditable(false);
                            JPasswordField inputPasswordTextField = new JPasswordField();
                            JPasswordField inputPasswordAgainTextField = new JPasswordField();

                            Object[] message = {"Username:", inputUsernameTextField, 
                                                "Password:", inputPasswordTextField,
                                                "Confirm Password:", inputPasswordAgainTextField};
                            option = JOptionPane.showConfirmDialog(null, message, "Create New Account", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                            
                            if (option == JOptionPane.OK_OPTION) {
                                username = inputUsernameTextField.getText();
                                password = String.valueOf(inputPasswordTextField.getPassword());
                                passwordConfirmation = String.valueOf(inputPasswordAgainTextField.getPassword());
                                
                                if(!password.equals(passwordConfirmation)) {
                                    JOptionPane.showMessageDialog(rootPane, "Passwords not equals", "Error", JOptionPane.ERROR_MESSAGE);
                                } else {
                                    isToRepeat = false;
                                    isToCreateAccount = true;
                                }
                            
                            } else if (option == JOptionPane.CANCEL_OPTION) {
                                isToRepeat = false;
                                isToCreateAccount = false;
                            }
                        } while (isToRepeat);
                        // </editor-fold>
                        
                        if (isToCreateAccount) {
                            try {
                                client.CreateAccount(new Login(username, password), onlineServer.get(jListServers.getSelectedIndex()));
                                // <editor-fold defaultstate="collapsed" desc=" Update Tree ">
                                    DefaultMutableTreeNode server = new DefaultMutableTreeNode("remote" + onlineServer.get(jListServers.getSelectedIndex()).getName());
                                    root.add(server);
                                    addFiles(client.GetWorkingDirContent(onlineServer.get(jListServers.getSelectedIndex())), server);
                                // </editor-fold>
 
                            } catch (ServerConnectionException | CreateAccountException ex) {
                                JOptionPane.showMessageDialog(rootPane, ex, "Error", JOptionPane.ERROR_MESSAGE);
                            } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {/*ignore*/}
                        }
                    }
                });
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Logout Item (PopUpMenu) ">
                itemLogout =  new JMenuItem("Logout");
                itemLogout.setEnabled(client.isLoggedIn(onlineServer.get(jListServers.getSelectedIndex()).getName()));
                itemLogout.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            client.Logout(onlineServer.get(jListServers.getSelectedIndex()));
                            root.remove(findNode(root, "remote" + onlineServer.get(jListServers.getSelectedIndex()).getName()));
                            UpdateTree();
                        } catch (ServerConnectionException | ClientNotLoggedInException ex) {
                           JOptionPane.showMessageDialog(rootPane, ex, "Logout error", JOptionPane.ERROR_MESSAGE);
                        }catch (UsernameOrPasswordIncorrectException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {/*ignorar*/}
                    }
                });
                // </editor-fold>
                
                // <editor-fold defaultstate="collapsed" desc=" Adicionar itens ao PopUpMenu/ Mostrar PopUpMenu ">
                popup.add(itemLogin);
                popup.add(itemRegister);
                popup.add(itemLogout);
                popup.show(this.jListServers, evt.getX(), evt.getY());
                // </editor-fold>
            }
        }
    }//GEN-LAST:event_jListServersMouseClicked

    private void jButtonRefreshListsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRefreshListsMouseClicked
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc=" Enviar/Receber mensagem para atualizar as listas ">
        client.getAllLists();
        // </editor-fold>
    }//GEN-LAST:event_jButtonRefreshListsMouseClicked

    private void jListClientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListClientsMouseClicked
        // TODO add your handling code here:
        if (!this.jListClients.isSelectionEmpty()){
            if (evt.getClickCount() == 2){
                DataAddress usernameToSend = this.onlineClient.get(this.jListClients.getSelectedIndex());
                String title = "Message to " + usernameToSend.getName();
                JFrame frame = new JFrame(title);
                
                String aux = JOptionPane.showInputDialog(frame, "Input your message", title, JOptionPane.OK_CANCEL_OPTION);
                String message = "[" + username + " - To " + usernameToSend.getName() + "] -> " + aux;
                if (aux != null)
                    client.sendMessageTo(usernameToSend, message);
            }
        }
    }//GEN-LAST:event_jListClientsMouseClicked

    private void jButtonBroadcastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBroadcastMouseClicked
        // TODO add your handling code here:
        if (this.onlineClient.isEmpty())
            return;
        
        String title = "Message to All users";
        JFrame frame = new JFrame(title);
        String aux = JOptionPane.showInputDialog(frame, "Input your message", title, JOptionPane.OK_CANCEL_OPTION);
        String message = "[" + username + " - To All] -> " + aux;
        if (aux != null)
            client.sendMessageToAll(message);
    }//GEN-LAST:event_jButtonBroadcastMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.client.getAllLists();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.client.exit(false);
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        String title = "Distributed File System";
        String message = "<html>Work done in the Distributed Programming class (Prof. José Marinho) in the first semester<br/>"
                + "of the 3rd year of the ISEC Computer Engineering course(2016/2017).<br/>"
                + "Authors:<br/>"
                + "&#9Daniel Moreira&#9Nº21240321<br/>"
                + "&#9Hugo Santos&#9Nº21220702<br/>"
                + "&#9Tiago Santos&#9Nº21230530";
        JLabel txtMessage = new JLabel(message);
        txtMessage.setFont(new Font("Tahoma", Font.PLAIN, 22));
        JOptionPane.showMessageDialog(null, txtMessage, title, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            // TODO add your handling code here:
            this.client.addObserver();
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Remote Exception", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            // TODO add your handling code here:
            this.client.removeObserver();
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Remote Exception", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void doMouseClicked(MouseEvent me) {
        popup = new JPopupMenu();
        JMenuItem itemCopy, itemPaste, itemCut, itemMakedir, itemRemove;
        final TreePath tp = tree.getPathForLocation(me.getX(), me.getY());

        if (tp != null) {   //Se estiver alguma coisa selecionada
            if (me.getButton() == 1 && me.getClickCount() == 2) {    //É para abrir
                if (tp.getPathCount() == 3) {
                    if (((DefaultMutableTreeNode)tp.getLastPathComponent()).getAllowsChildren()){   // Se é ficheiro
                        String fatherName = tp.getParentPath().getLastPathComponent().toString();
                        try {
                            DefaultMutableTreeNode fatherNode = findNode(root, fatherName);
                            fatherNode.removeAllChildren();
                            addFiles(client.ChangeDirectory(fatherName.replace("remote",""), tp.getLastPathComponent().toString()), fatherNode);
                        } catch (ServerConnectionException ex) { //apanhar
                            JOptionPane.showMessageDialog(rootPane, ex, "Change dir error", JOptionPane.ERROR_MESSAGE);
                        } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                    } else
                        try {
                            client.GetFileContent(tp.getParentPath().getLastPathComponent().toString().replace("remote", ""), client.GetWorkingDirPath(tp.getParentPath().getLastPathComponent().toString().replace("remote", "")) + tp.getLastPathComponent().toString());
                    } catch (ServerConnectionException | GetFileContentException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex, "GetFileContent error", JOptionPane.ERROR_MESSAGE);
                    } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | UploadException ex) {}
                }
            } else if (me.getButton() == 3) {
                if (tp.getPathCount() == 2) {
                    //Botao direito e servidor
                    // <editor-fold defaultstate="collapsed" desc=" MakeDir ">
                    itemMakedir = new JMenuItem("MakeDir");
                    itemMakedir.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            //  JFrame frame = new JFrame(title);
                            String title = "MakeDir";
                            JFrame frame = new JFrame(title);
                            String aux = JOptionPane.showInputDialog(null, "Choose folder name");
                            if (aux != null) {
                                try {
                                    client.MakeDir(tp.getLastPathComponent().toString().replace("remote", ""), aux);
                                    findNode(root, tp.getLastPathComponent().toString()).add(new DefaultMutableTreeNode(aux));
                                    UpdateTree();
                                } catch (ServerConnectionException | MakeDirException ex) {
                                    JOptionPane.showMessageDialog(rootPane, ex, "Make dir error", JOptionPane.ERROR_MESSAGE);
                                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                            }
                        }
                    });
                    popup.add(itemMakedir);
                    // </editor-fold>
                    // <editor-fold defaultstate="collapsed" desc=" Paste Folder/File ">
                    itemPaste = new JMenuItem("Paste");
                    itemPaste.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            if (tp.getLastPathComponent().toString().equals(copy.substring(0, copy.indexOf(File.separator)+1))){
                                try {
                                    UpdateWorkingDirectory(findNode(root, tp.getLastPathComponent().toString()), client.CopyAndPaste(tp.getLastPathComponent().toString().replace("remote", ""), copy));
                                } catch (ServerConnectionException | CopyFileException ex) {
                                    JOptionPane.showMessageDialog(rootPane, ex, "Copy and Paste error", JOptionPane.ERROR_MESSAGE);
                                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | GetFileContentException | UploadException ex) {}
                            } else{
                                String serverOrigem = copy.substring(0, copy.indexOf(File.separator));
                                if(serverOrigem.equals("C:"))
                                    serverOrigem += File.separator;
                                //String serverDestino = tp.getLastPathComponent().toString();
                                try {
                                    client.Download(serverOrigem.replace("remote", ""), copy);
                                
                                    try {
                                        UpdateWorkingDirectory(findNode(root, tp.getLastPathComponent().toString()), client.Upload(tp.getLastPathComponent().toString().replace("remote", "")));
                                        if(isToCut){
                                            client.Remove(serverOrigem.replace("remote", ""), copy.substring(copy.lastIndexOf(File.separator)+1, copy.length()));
                                            DefaultMutableTreeNode fatherNode = findNode(root, serverOrigem);
                                            DefaultMutableTreeNode childNode = findNode(fatherNode, copy.substring(copy.lastIndexOf(File.separator)+1, copy.length()));
                                            fatherNode.remove(childNode);
                                            UpdateTree();
                                            isToCut = false;
                                        }
                                    } catch (ServerConnectionException | UploadException ex) {
                                        JOptionPane.showMessageDialog(rootPane, ex, "Upload error", JOptionPane.ERROR_MESSAGE);
                                    } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException ex) {}
                                } catch (ServerConnectionException | GetFileContentException ex) {
                                    JOptionPane.showMessageDialog(rootPane, ex, "Download error", JOptionPane.ERROR_MESSAGE);
                                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | UploadException ex) {}    
                            }
                        }
                    });
                    popup.add(itemPaste);
                    // </editor-fold>
                } else if (tp.getPathCount() == 3) {
                    if (!((DefaultMutableTreeNode)tp.getLastPathComponent()).getAllowsChildren()) {
                        //Botao direito nos ficheiros
                        // <editor-fold defaultstate="collapsed" desc=" Copy Folder/File ">
                        itemCopy = new JMenuItem("Copy");
                        itemCopy.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                System.out.println("[ClientGUI]Send Copy to server.");
                                try {
                                    copy = client.GetWorkingDirPath(tp.getParentPath().getLastPathComponent().toString().replace("remote","")) + tp.getLastPathComponent().toString();
                                } catch (ServerConnectionException ex) {
                                    JOptionPane.showMessageDialog(rootPane, ex, "Make dir error", JOptionPane.ERROR_MESSAGE);
                                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                            }
                        });
                        popup.add(itemCopy);
                        // </editor-fold>
                        // <editor-fold defaultstate="collapsed" desc=" Cut Folder/File ">
                        itemCut = new JMenuItem("Cut");
                        itemCut.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                System.out.println("[ClientGUI]Send Cut to server.");
                                try {
                                    copy = client.GetWorkingDirPath(tp.getParentPath().getLastPathComponent().toString().replace("remote","")) + tp.getLastPathComponent().toString();
                                    isToCut = true;
                                } catch (ServerConnectionException ex) {
                                    JOptionPane.showMessageDialog(rootPane, ex, "Make dir error", JOptionPane.ERROR_MESSAGE);
                                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                            }
                        });
                        popup.add(itemCut);
                        // </editor-fold>
                    }
                    //Botão direito na pasta ou ficheiro
                    // <editor-fold defaultstate="collapsed" desc=" Remove Folder/File ">
                    itemRemove = new JMenuItem("Remove");
                    itemRemove.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try{
                                client.Remove(tp.getParentPath().getLastPathComponent().toString().replace("remote", ""), tp.getLastPathComponent().toString());
                                DefaultMutableTreeNode fatherNode = findNode(root, tp.getParentPath().getLastPathComponent().toString());
                                DefaultMutableTreeNode childNode = findNode(fatherNode, tp.getLastPathComponent().toString());
                                fatherNode.remove(childNode);
                                UpdateTree();
                            } catch (ServerConnectionException | RemoveFileOrDirException ex) {
                                JOptionPane.showMessageDialog(rootPane, ex, "Remove error", JOptionPane.ERROR_MESSAGE);
                            } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | CopyFileException | GetFileContentException | UploadException ex) {}
                        }
                    });
                    popup.add(itemRemove);
                    // </editor-fold>
                }
                popup.show(this.jScrollPane1, me.getX(), me.getY());
            }
        } else
            System.out.println("[ClientGUI]No selection");
    }    
    // </editor-fold>
    
    private void UpdateTree(){
        tree.updateUI();
        jScrollPane1.repaint();
    }
    
    private void UpdateWorkingDirectory(DefaultMutableTreeNode fatherNode, ArrayList<File> files){
        fatherNode.removeAllChildren();
        addFiles(files, fatherNode);
        UpdateTree();
    }
    
    private DefaultMutableTreeNode findNode(DefaultMutableTreeNode fatherNode, String name){
        for(int i= 0; i < fatherNode.getChildCount(); i++)
            if(fatherNode.getChildAt(i).toString().equals(name))
                return (DefaultMutableTreeNode) fatherNode.getChildAt(i);
        return null;
    }
    
    private byte[] HomeDownload(String path){
        try {
            return Files.readAllBytes((new File(path)).toPath());
        } catch (IOException ex) {
            return null;
        }
    }
    
    // <editor-fold defaultstate="collapsed" desc=" Variables declaration - do not modify ">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBroadcast;
    private javax.swing.JButton jButtonRefreshLists;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelClients;
    private javax.swing.JLabel jLabelServers;
    private javax.swing.JList jListClients;
    private javax.swing.JList jListRMIServers;
    private javax.swing.JList jListServers;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextAreaMessages;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    private void addFiles(ArrayList<File> files, DefaultMutableTreeNode remote) {
        if (files != null){
            for (File f: files){
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(f.getName());
                if (f.getName().lastIndexOf(".") != -1)
                    node.setAllowsChildren(false);
                remote.add(node);
            }
            if (remote.toString().contains("remote")){
                try {
                    String name = client.GetWorkingDirPath(remote.toString().replace("remote",""));
                    if(!name.equals(remote.toString() + File.separator))
                        remote.add( new DefaultMutableTreeNode("[ " + name + " ]"));
                } catch (ServerConnectionException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex, "Get working dir path error", JOptionPane.ERROR_MESSAGE);
                } catch (UsernameOrPasswordIncorrectException | ClientNotLoggedInException | CreateAccountException | MakeDirException | RemoveFileOrDirException | CopyFileException | GetFileContentException | UploadException ex) {}
            } else if(!client.getHomePath().equals(File.listRoots()[0].toString()))
                remote.add( new DefaultMutableTreeNode("[ " + client.getHomePath() + " ]"));
        } else
            System.out.println("[ClientGUI]Files are null");
        UpdateTree();
    }
    
    private void fillServersList() {
        if (client.getOnlineServers() == null ) return;
        this.onlineServer = new ArrayList<>(client.getOnlineServers());
        
        DefaultListModel<String> listServersModel = new DefaultListModel<>();
        for(DataAddress da : onlineServer) {
            listServersModel.addElement(da.getName());
        }
        jListServers.setModel(listServersModel);
    }
    
    private void fillClientsList() {
        if (client.getOnlineClients() == null ) return;
        this.onlineClient = new ArrayList<>(client.getOnlineClients());
        
        DefaultListModel<String> listClientsModel = new DefaultListModel<>();
        for(DataAddress da : onlineClient) {
            listClientsModel.addElement(da.getName());
        }
        jListClients.setModel(listClientsModel);
    }
    
    private void fillMessageTextArea() {
        if(this.client.getMessage() != null)
            this.jTextAreaMessages.setText(this.jTextAreaMessages.getText() + "\n" + client.getMessage());
    }
    
    private void fillServersRMIList() {      
        DefaultListModel<String> listRMIServersModel = new DefaultListModel<>();
        for(String server : this.client.getServersWhereImNotAuthenticated()) {
            listRMIServersModel.addElement(server);
        }
        jListRMIServers.setModel(listRMIServersModel);
    }

    @Override
    public void update(Observable o, Object arg) {
        fillClientsList();
        fillServersList();
        fillMessageTextArea();
        fillServersRMIList();
        repaint();
    }
}
